{
  "address": "0x349094471A746FaF7A211E7eE62Ea29C23Ada148",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "ctUint64[]",
          "name": "ctUserSomeEncryptedStringValue",
          "type": "uint256[]"
        }
      ],
      "name": "UserEncryptedStringValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "ctUint64",
          "name": "ctUserSomeEncryptedValue",
          "type": "uint256"
        }
      ],
      "name": "UserEncryptedValue",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNetworkSomeEncryptedValue",
      "outputs": [
        {
          "internalType": "ctUint64",
          "name": "ctSomeEncryptedValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNetworkSomeEncryptedValueEncryptedInput",
      "outputs": [
        {
          "internalType": "ctUint64",
          "name": "ctSomeEncryptedValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSomeValue",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserArithmeticResult",
      "outputs": [
        {
          "internalType": "ctUint64",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserSomeEncryptedStringEncryptedInput",
      "outputs": [
        {
          "internalType": "ctUint64[]",
          "name": "ctSomeEncryptedValue",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserSomeEncryptedValue",
      "outputs": [
        {
          "internalType": "ctUint64",
          "name": "ctSomeEncryptedValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserSomeEncryptedValueEncryptedInput",
      "outputs": [
        {
          "internalType": "ctUint64",
          "name": "ctSomeEncryptedValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ctUint64",
          "name": "networkEncrypted",
          "type": "uint256"
        }
      ],
      "name": "setNetworkSomeEncryptedValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ctUint64[]",
          "name": "_itInputString",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_itSignature",
          "type": "bytes[]"
        }
      ],
      "name": "setSomeEncryptedStringEncryptedInput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_value",
          "type": "uint64"
        }
      ],
      "name": "setSomeEncryptedValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ctUint64",
          "name": "_itCT",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_itSignature",
          "type": "bytes"
        }
      ],
      "name": "setSomeEncryptedValueEncryptedInput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUserSomeEncryptedStringEncryptedInput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUserSomeEncryptedValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUserSomeEncryptedValueEncryptedInput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0afbe7434b3af70815d4dbd787c3965ac730f493f4c2a3f500aab36a20a3aa64",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x96932d42F54c73F3422BA948Cc962210bBB2C9Ed",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1311346",
    "logsBloom": "0x
    "blockHash": "0x6fbd824ea41458526544fe0804abd65f8bfdf685c0a2d558ec5ee5e9e23ff6a9",
    "transactionHash": "0x0afbe7434b3af70815d4dbd787c3965ac730f493f4c2a3f500aab36a20a3aa64",
    "logs": [],
    "blockNumber": 86676,
    "cumulativeGasUsed": "1311346",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5bdb9be18cb09b78d9798d98c786f0ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"ctUint64[]\",\"name\":\"ctUserSomeEncryptedStringValue\",\"type\":\"uint256[]\"}],\"name\":\"UserEncryptedStringValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"ctUint64\",\"name\":\"ctUserSomeEncryptedValue\",\"type\":\"uint256\"}],\"name\":\"UserEncryptedValue\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkSomeEncryptedValue\",\"outputs\":[{\"internalType\":\"ctUint64\",\"name\":\"ctSomeEncryptedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkSomeEncryptedValueEncryptedInput\",\"outputs\":[{\"internalType\":\"ctUint64\",\"name\":\"ctSomeEncryptedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSomeValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserArithmeticResult\",\"outputs\":[{\"internalType\":\"ctUint64\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserSomeEncryptedStringEncryptedInput\",\"outputs\":[{\"internalType\":\"ctUint64[]\",\"name\":\"ctSomeEncryptedValue\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserSomeEncryptedValue\",\"outputs\":[{\"internalType\":\"ctUint64\",\"name\":\"ctSomeEncryptedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserSomeEncryptedValueEncryptedInput\",\"outputs\":[{\"internalType\":\"ctUint64\",\"name\":\"ctSomeEncryptedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ctUint64\",\"name\":\"networkEncrypted\",\"type\":\"uint256\"}],\"name\":\"setNetworkSomeEncryptedValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ctUint64[]\",\"name\":\"_itInputString\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_itSignature\",\"type\":\"bytes[]\"}],\"name\":\"setSomeEncryptedStringEncryptedInput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_value\",\"type\":\"uint64\"}],\"name\":\"setSomeEncryptedValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ctUint64\",\"name\":\"_itCT\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_itSignature\",\"type\":\"bytes\"}],\"name\":\"setSomeEncryptedValueEncryptedInput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUserSomeEncryptedStringEncryptedInput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUserSomeEncryptedValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUserSomeEncryptedValueEncryptedInput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DataOnChain.sol\":\"DataOnChain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DataOnChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./lib/MpcCore.sol\\\";\\n\\ncontract DataOnChain {\\n\\n    uint64 private clearValue;\\n    ctUint64 private ctUserSomeEncryptedValue;\\n    ctUint64 private ctUserSomeEncryptedValueEncryptedInput;\\n    ctUint64 private ctNetworkSomeEncryptedValue;\\n    ctUint64 private ctNetworkSomeEncryptedValueEncryptedInput;\\n    ctUint64 private ctUserArithmeticResult;\\n    ctUint64[] private ctUserSomeEncryptedStringEncryptedInput;\\n    ctUint64[] private ctNetworkSomeEncryptedStringEncryptedInput;\\n    ctUint64[] private ctUserSomeEncryptedStringValue;\\n\\n\\n\\n    constructor () {\\n        clearValue = 5;\\n    }\\n\\n    event UserEncryptedValue(address indexed _from, ctUint64 ctUserSomeEncryptedValue);\\n\\n    event UserEncryptedStringValue(address indexed _from, ctUint64[] ctUserSomeEncryptedStringValue);\\n\\n\\n    function getNetworkSomeEncryptedValue() external view returns (ctUint64 ctSomeEncryptedValue) {\\n        return ctNetworkSomeEncryptedValue;\\n    }\\n\\n    function setNetworkSomeEncryptedValue(ctUint64 networkEncrypted) external {\\n        ctNetworkSomeEncryptedValue = networkEncrypted;\\n    }\\n\\n    function getNetworkSomeEncryptedValueEncryptedInput() external view returns (ctUint64 ctSomeEncryptedValue) {\\n        return ctNetworkSomeEncryptedValueEncryptedInput;\\n    }\\n\\n    function getUserSomeEncryptedValue() external view returns (ctUint64 ctSomeEncryptedValue) {\\n        return ctUserSomeEncryptedValue;\\n    }\\n\\n    function getUserSomeEncryptedValueEncryptedInput() external view returns (ctUint64 ctSomeEncryptedValue) {\\n        return ctUserSomeEncryptedValueEncryptedInput;\\n    }\\n\\n    function getUserSomeEncryptedStringEncryptedInput() external view returns (ctUint64[] memory ctSomeEncryptedValue) {\\n        return ctUserSomeEncryptedStringEncryptedInput;\\n    }\\n\\n    function setSomeEncryptedValue(uint64 _value) external {\\n        gtUint64 gtNetworkSomeEncryptedValue = MpcCore.setPublic64(_value); // passage step to make the clear value publicly available by having it encrypted\\n        ctNetworkSomeEncryptedValue = MpcCore.offBoard(gtNetworkSomeEncryptedValue); // saves it as cipher text (by network aes key)\\n    }\\n\\n    function setSomeEncryptedValueEncryptedInput(ctUint64 _itCT, bytes calldata _itSignature) external {\\n        itUint64 memory it;\\n        it.ciphertext = _itCT;\\n        it.signature = _itSignature;\\n        gtUint64 gtNetworkSomeEncryptedValue = MpcCore.validateCiphertext(it);  // passage step to make the clear value publicly available by having it encrypted,\\n        // only after decrypting it and validating its cryptographically correct by the sender's key\\n        ctNetworkSomeEncryptedValueEncryptedInput = MpcCore.offBoard(gtNetworkSomeEncryptedValue); // saves it as cipher text (by network aes key)\\n    }\\n\\n    function setSomeEncryptedStringEncryptedInput(ctUint64[] calldata _itInputString, bytes[] calldata _itSignature) external {\\n        gtUint64[] memory _encryptedValueGt = new gtUint64[](_itInputString.length);\\n\\n        itUint64 memory it;\\n\\n        for (uint256 i = 0; i < _itInputString.length; ++i) {\\n            it.ciphertext = _itInputString[i];\\n            it.signature = _itSignature[i];\\n\\n            _encryptedValueGt[i] = MpcCore.validateCiphertext(it);\\n        }\\n\\n        ctUint64[] memory tmp = new ctUint64[](_itInputString.length);\\n        for (uint256 i = 0; i < _encryptedValueGt.length; ++i) {\\n            tmp[i] = MpcCore.offBoard(_encryptedValueGt[i]);\\n        }\\n        ctNetworkSomeEncryptedStringEncryptedInput = tmp;\\n    }\\n\\n    function setUserSomeEncryptedValue() external {\\n        gtUint64 gtNetworkSomeEncryptedValue = MpcCore.onBoard(ctNetworkSomeEncryptedValue);        // loads encrypted (by network) into a circuit producing garbled-text representation\\n        ctUserSomeEncryptedValue = MpcCore.offBoardToUser(gtNetworkSomeEncryptedValue, msg.sender); // form change from garbled-text to cipher text (encryption) by wallet key\\n        emit UserEncryptedValue(msg.sender, ctUserSomeEncryptedValue);\\n    }\\n\\n    function setUserSomeEncryptedValueEncryptedInput() external {\\n        gtUint64 gtEncryptedUserSomeEncryptedValue = MpcCore.onBoard(ctNetworkSomeEncryptedValueEncryptedInput);\\n        ctUserSomeEncryptedValueEncryptedInput = MpcCore.offBoardToUser(gtEncryptedUserSomeEncryptedValue, msg.sender);\\n        emit UserEncryptedValue(msg.sender, ctUserSomeEncryptedValueEncryptedInput);\\n    }\\n\\n    function setUserSomeEncryptedStringEncryptedInput() external {\\n        gtUint64[] memory userGt = new gtUint64[](ctNetworkSomeEncryptedStringEncryptedInput.length);\\n\\n        for (uint256 i = 0; i < ctNetworkSomeEncryptedStringEncryptedInput.length; ++i) {\\n            userGt[i] = MpcCore.onBoard(ctNetworkSomeEncryptedStringEncryptedInput[i]);\\n        }\\n        ctUint64[] memory tmp = new ctUint64[](userGt.length);\\n        for (uint256 i = 0; i < userGt.length; ++i) {\\n            tmp[i] = MpcCore.offBoardToUser(userGt[i], msg.sender);\\n        }\\n        ctUserSomeEncryptedStringEncryptedInput = tmp;\\n\\n        emit UserEncryptedStringValue(msg.sender, ctUserSomeEncryptedStringEncryptedInput);\\n    }\\n\\n    function getSomeValue() external view returns (uint64 value) {\\n        return clearValue;\\n    }\\n\\n    function add() external {\\n        gtUint64 a = MpcCore.onBoard(ctNetworkSomeEncryptedValue);\\n        gtUint64 b = MpcCore.onBoard(ctNetworkSomeEncryptedValueEncryptedInput);\\n        gtUint64 result = MpcCore.add(a, b); // input for function need to be in the form of garbled-text (not user nor network encrypted)\\n        ctUserArithmeticResult = MpcCore.offBoardToUser(result, msg.sender);\\n    }\\n\\n    function getUserArithmeticResult() external view returns (ctUint64 value){\\n        return ctUserArithmeticResult;\\n    }\\n}\",\"keccak256\":\"0x339da9ebf8b1b30321d95be198757abc1c925c38a6c843b78bf4435e96b6c139\",\"license\":\"MIT\"},\"contracts/lib/MpcCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\ntype gtBool is uint256;\\ntype gtUint8 is uint256;\\ntype gtUint16 is uint256;\\ntype gtUint32 is uint256;\\ntype gtUint64 is uint256;\\n\\ntype ctBool is uint256;\\ntype ctUint8 is uint256;\\ntype ctUint16 is uint256;\\ntype ctUint32 is uint256;\\ntype ctUint64 is uint256;\\n\\nstruct itBool {\\n    ctBool ciphertext;\\n    bytes signature;\\n}\\nstruct itUint8 {\\n    ctUint8 ciphertext;\\n    bytes signature;\\n}\\nstruct itUint16 {\\n    ctUint16 ciphertext;\\n    bytes signature;\\n}\\nstruct itUint32 {\\n    ctUint32 ciphertext;\\n    bytes signature;\\n}\\nstruct itUint64 {\\n    ctUint64 ciphertext;\\n    bytes signature;\\n}\\n\\nstruct utBool {\\n    ctBool ciphertext;\\n    ctBool userCiphertext;\\n}\\nstruct utUint8 {\\n    ctUint8 ciphertext;\\n    ctUint8 userCiphertext;\\n}\\nstruct utUint16 {\\n    ctUint16 ciphertext;\\n    ctUint16 userCiphertext;\\n}\\nstruct utUint32 {\\n    ctUint32 ciphertext;\\n    ctUint32 userCiphertext;\\n}\\nstruct utUint64 {\\n    ctUint64 ciphertext;\\n    ctUint64 userCiphertext;\\n}\\n\\n\\nimport \\\"./MpcInterface.sol\\\";\\n\\n\\nlibrary MpcCore {\\n\\n    enum MPC_TYPE {SBOOL_T , SUINT8_T , SUINT16_T, SUINT32_T ,SUINT64_T }\\n    enum ARGS {BOTH_SECRET , LHS_PUBLIC, RHS_PUBLIC  }\\n\\n    function combineEnumsToBytes2(MPC_TYPE mpcType, ARGS argsType) internal pure returns (bytes2) {\\n        return bytes2(uint16(mpcType) << 8 | uint8(argsType));\\n    }\\n\\n    function combineEnumsToBytes3(MPC_TYPE mpcType1, MPC_TYPE mpcType2, ARGS argsType) internal pure returns (bytes3) {\\n        return bytes3(uint24(mpcType1) << 16 | uint16(mpcType2) << 8 | uint8(argsType));\\n    }\\n\\n    function combineEnumsToBytes4(MPC_TYPE mpcType1, MPC_TYPE mpcType2, MPC_TYPE mpcType3, ARGS argsType) internal pure returns (bytes4) {\\n        return bytes4(uint32(mpcType1) << 24 | uint24(mpcType2) << 16 | uint16(mpcType3) << 8 | uint8(argsType));\\n    }\\n\\n    function getUserKey(bytes calldata signedEK, bytes calldata signature) internal view returns (bytes memory encryptedKey) {\\n        // Combine array from signedEK and signature\\n        bytes memory combined = new bytes(signature.length + signedEK.length);\\n\\n        // Copy contents of signature into combined\\n        for (uint i = 0; i < signature.length; i++) {\\n            combined[i] = signature[i];\\n        }\\n\\n        // Copy contents of _bytes2 into combined after _bytes1\\n        for (uint j = 0; j < signedEK.length; j++) {\\n            combined[signature.length + j] = signedEK[j];\\n        }\\n        return ExtendedOperations(MPC_PRECOMPILE).GetUserKey(combined);\\n    }\\n\\n    \\n\\n// =========== 1 bit operations ==============\\n\\n    function validateCiphertext(itBool memory input) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            ValidateCiphertext(bytes1(uint8(MPC_TYPE.SBOOL_T)), ctBool.unwrap(input.ciphertext), input.signature));\\n    }\\n\\n    function onBoard(ctBool ct) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OnBoard(bytes1(uint8(MPC_TYPE.SBOOL_T)), ctBool.unwrap(ct)));\\n    }\\n\\n    function offBoard(gtBool pt) internal returns (ctBool) {\\n          return ctBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoard(bytes1(uint8(MPC_TYPE.SBOOL_T)), gtBool.unwrap(pt)));\\n    }\\n\\n    function offBoardToUser(gtBool pt, address addr) internal returns (ctBool) {\\n          return ctBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoardToUser(bytes1(uint8(MPC_TYPE.SBOOL_T)), gtBool.unwrap(pt), abi.encodePacked(addr)));\\n    }\\n\\n    function offBoardCombined(gtBool pt, address addr) internal returns (utBool memory ut) {\\n        ut.ciphertext = offBoard(pt);\\n        ut.userCiphertext = offBoardToUser(pt, addr);\\n    }\\n\\n    function setPublic(bool pt) internal returns (gtBool) {\\n        uint256 temp;\\n        temp = pt ? 1 : 0; \\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            SetPublic(bytes1(uint8(MPC_TYPE.SBOOL_T)), temp));\\n    }\\n\\n    function rand() internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).Rand(bytes1(uint8(MPC_TYPE.SBOOL_T))));\\n    }\\n\\n    function and(gtBool a, gtBool b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SBOOL_T, MPC_TYPE.SBOOL_T, ARGS.BOTH_SECRET), gtBool.unwrap(a), gtBool.unwrap(b)));\\n    }\\n\\n    function or(gtBool a, gtBool b) internal returns (gtBool) {\\n          return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SBOOL_T, MPC_TYPE.SBOOL_T, ARGS.BOTH_SECRET), gtBool.unwrap(a), gtBool.unwrap(b)));\\n    }\\n\\n    function xor(gtBool a, gtBool b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SBOOL_T, MPC_TYPE.SBOOL_T, ARGS.BOTH_SECRET), gtBool.unwrap(a), gtBool.unwrap(b)));\\n    }\\n    \\n    function eq(gtBool a, gtBool b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SBOOL_T, MPC_TYPE.SBOOL_T, ARGS.BOTH_SECRET), gtBool.unwrap(a), gtBool.unwrap(b)));\\n    }\\n\\n    function ne(gtBool a, gtBool b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SBOOL_T, MPC_TYPE.SBOOL_T, ARGS.BOTH_SECRET), gtBool.unwrap(a), gtBool.unwrap(b)));\\n    }\\n\\n    function decrypt(gtBool ct) internal returns (bool){\\n        uint256 temp = ExtendedOperations(MPC_PRECOMPILE).\\n            Decrypt(bytes1(uint8(MPC_TYPE.SBOOL_T)), gtBool.unwrap(ct));\\n        return temp != 0;\\n    }\\n\\n    function mux(gtBool bit, gtBool a, gtBool b) internal returns (gtBool){\\n         return  gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SBOOL_T, MPC_TYPE.SBOOL_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtBool.unwrap(a), gtBool.unwrap(b)));\\n    }\\n\\n    function not(gtBool a) internal returns (gtBool){\\n         return  gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Not(bytes1(uint8(MPC_TYPE.SBOOL_T)), gtBool.unwrap(a)));\\n    }\\n\\n\\n // =========== Operations with BOTH_SECRET parameter ===========\\n // =========== 8 bit operations ==============\\n\\n    function validateCiphertext(itUint8 memory input) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            ValidateCiphertext(bytes1(uint8(MPC_TYPE.SUINT8_T)), ctUint8.unwrap(input.ciphertext), input.signature));\\n    }\\n\\n    function onBoard(ctUint8 ct) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OnBoard(bytes1(uint8(MPC_TYPE.SUINT8_T)), ctUint8.unwrap(ct)));\\n    }\\n\\n    function offBoard(gtUint8 pt) internal returns (ctUint8) {\\n          return ctUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoard(bytes1(uint8(MPC_TYPE.SUINT8_T)), gtUint8.unwrap(pt)));\\n    }\\n\\n    function offBoardToUser(gtUint8 pt, address addr) internal returns (ctUint8) {\\n          return ctUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoardToUser(bytes1(uint8(MPC_TYPE.SUINT8_T)), gtUint8.unwrap(pt), abi.encodePacked(addr)));\\n    }\\n\\n    function offBoardCombined(gtUint8 pt, address addr) internal returns (utUint8 memory ut) {\\n        ut.ciphertext = offBoard(pt);\\n        ut.userCiphertext = offBoardToUser(pt, addr);\\n    }\\n\\n    function setPublic8(uint8 pt) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            SetPublic(bytes1(uint8(MPC_TYPE.SUINT8_T)), uint256(pt)));\\n    }\\n\\n    function rand8() internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).Rand(bytes1(uint8(MPC_TYPE.SUINT8_T))));\\n    }\\n\\n    function randBoundedBits8(uint8 numBits) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).RandBoundedBits(bytes1(uint8(MPC_TYPE.SUINT8_T)), numBits));\\n    }\\n\\n    function add(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function sub(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function mul(gtUint8 a, gtUint8 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function div(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function rem(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function and(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function or(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function xor(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shl(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shr(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function eq(gtUint8 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ne(gtUint8 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ge(gtUint8 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function gt(gtUint8 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function le(gtUint8 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function lt(gtUint8 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function min(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function max(gtUint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function decrypt(gtUint8 ct) internal returns (uint8){\\n          return uint8(ExtendedOperations(MPC_PRECOMPILE).\\n            Decrypt(bytes1(uint8(MPC_TYPE.SUINT8_T)), gtUint8.unwrap(ct)));\\n    }\\n\\n    function mux(gtBool bit, gtUint8 a, gtUint8 b) internal returns (gtUint8){\\n         return  gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint8.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint8 b, gtUint8 amount) internal returns (gtUint8, gtUint8, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint8.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint8.wrap(new_a), gtUint8.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n\\n // =========== 16 bit operations ==============\\n\\n    function validateCiphertext(itUint16 memory input) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            ValidateCiphertext(bytes1(uint8(MPC_TYPE.SUINT16_T)), ctUint16.unwrap(input.ciphertext), input.signature));\\n    }\\n\\n    function onBoard(ctUint16 ct) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OnBoard(bytes1(uint8(MPC_TYPE.SUINT16_T)), ctUint16.unwrap(ct)));\\n    }\\n\\n    function offBoard(gtUint16 pt) internal returns (ctUint16) {\\n          return ctUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoard(bytes1(uint8(MPC_TYPE.SUINT16_T)), gtUint16.unwrap(pt)));\\n    }\\n\\n    function offBoardToUser(gtUint16 pt, address addr) internal returns (ctUint16) {\\n          return ctUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoardToUser(bytes1(uint8(MPC_TYPE.SUINT16_T)), gtUint16.unwrap(pt), abi.encodePacked(addr)));\\n    }\\n\\n    function offBoardCombined(gtUint16 pt, address addr) internal returns (utUint16 memory ut) {\\n        ut.ciphertext = offBoard(pt);\\n        ut.userCiphertext = offBoardToUser(pt, addr);\\n    }\\n\\n    function setPublic16(uint16 pt) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            SetPublic(bytes1(uint8(MPC_TYPE.SUINT16_T)), uint256(pt)));\\n    }\\n\\n    function rand16() internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).Rand(bytes1(uint8(MPC_TYPE.SUINT16_T))));\\n    }\\n\\n    function randBoundedBits16(uint8 numBits) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).RandBoundedBits(bytes1(uint8(MPC_TYPE.SUINT16_T)), numBits));\\n    }\\n\\n    function add(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function sub(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function mul(gtUint16 a, gtUint16 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function div(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function rem(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function and(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function or(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function xor(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shl(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shr(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function eq(gtUint16 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ne(gtUint16 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ge(gtUint16 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function gt(gtUint16 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function le(gtUint16 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function lt(gtUint16 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n    function min(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function max(gtUint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function decrypt(gtUint16 ct) internal returns (uint16){\\n          return uint16(ExtendedOperations(MPC_PRECOMPILE).\\n            Decrypt(bytes1(uint8(MPC_TYPE.SUINT16_T)), gtUint16.unwrap(ct)));\\n    }\\n\\n    function mux(gtBool bit, gtUint16 a, gtUint16 b) internal returns (gtUint16){\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint16.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint16 b, gtUint16 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n\\n\\n    // =========== 32 bit operations ==============\\n\\n    function validateCiphertext(itUint32 memory input) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            ValidateCiphertext(bytes1(uint8(MPC_TYPE.SUINT32_T)), ctUint32.unwrap(input.ciphertext), input.signature));\\n    }\\n\\n    function onBoard(ctUint32 ct) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OnBoard(bytes1(uint8(MPC_TYPE.SUINT32_T)), ctUint32.unwrap(ct)));\\n    }\\n\\n    function offBoard(gtUint32 pt) internal returns (ctUint32) {\\n          return ctUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoard(bytes1(uint8(MPC_TYPE.SUINT32_T)), gtUint32.unwrap(pt)));\\n    }\\n\\n    function offBoardToUser(gtUint32 pt, address addr) internal returns (ctUint32) {\\n          return ctUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoardToUser(bytes1(uint8(MPC_TYPE.SUINT32_T)), gtUint32.unwrap(pt), abi.encodePacked(addr)));\\n    }\\n    \\n    function offBoardCombined(gtUint32 pt, address addr) internal returns (utUint32 memory ut) {\\n        ut.ciphertext = offBoard(pt);\\n        ut.userCiphertext = offBoardToUser(pt, addr);\\n    }\\n\\n    function setPublic32(uint32 pt) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            SetPublic(bytes1(uint8(MPC_TYPE.SUINT32_T)), uint256(pt)));\\n    }\\n\\n    function rand32() internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).Rand(bytes1(uint8(MPC_TYPE.SUINT32_T))));\\n    }\\n\\n    function randBoundedBits32(uint8 numBits) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).RandBoundedBits(bytes1(uint8(MPC_TYPE.SUINT32_T)), numBits));\\n    }\\n\\n    function add(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function sub(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function mul(gtUint32 a, gtUint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function div(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function rem(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function and(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function or(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function xor(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shl(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shr(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n    function eq(gtUint32 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ne(gtUint32 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ge(gtUint32 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function gt(gtUint32 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function le(gtUint32 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function lt(gtUint32 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function min(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function max(gtUint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function decrypt(gtUint32 ct) internal returns (uint32){\\n          return uint32(ExtendedOperations(MPC_PRECOMPILE).\\n            Decrypt(bytes1(uint8(MPC_TYPE.SUINT32_T)), gtUint32.unwrap(ct)));\\n    }\\n\\n    function mux(gtBool bit, gtUint32 a, gtUint32 b) internal returns (gtUint32){\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint32.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint32 b, gtUint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n\\n\\n// =========== 64 bit operations ==============\\n\\n    function validateCiphertext(itUint64 memory input) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            ValidateCiphertext(bytes1(uint8(MPC_TYPE.SUINT64_T)), ctUint64.unwrap(input.ciphertext), input.signature));\\n    }\\n\\n    function onBoard(ctUint64 ct) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OnBoard(bytes1(uint8(MPC_TYPE.SUINT64_T)), ctUint64.unwrap(ct)));\\n    }\\n\\n    function offBoard(gtUint64 pt) internal returns (ctUint64) {\\n          return ctUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoard(bytes1(uint8(MPC_TYPE.SUINT64_T)), gtUint64.unwrap(pt)));\\n    }\\n\\n    function offBoardToUser(gtUint64 pt, address addr) internal returns (ctUint64) {\\n          return ctUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            OffBoardToUser(bytes1(uint8(MPC_TYPE.SUINT64_T)), gtUint64.unwrap(pt), abi.encodePacked(addr)));\\n    }\\n\\n    function offBoardCombined(gtUint64 pt, address addr) internal returns (utUint64 memory ut) {\\n        ut.ciphertext = offBoard(pt);\\n        ut.userCiphertext = offBoardToUser(pt, addr);\\n    }\\n\\n    function setPublic64(uint64 pt) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            SetPublic(bytes1(uint8(MPC_TYPE.SUINT64_T)), uint256(pt)));\\n    }\\n\\n    function rand64() internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).Rand(bytes1(uint8(MPC_TYPE.SUINT64_T))));\\n    }\\n\\n    function randBoundedBits64(uint8 numBits) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).RandBoundedBits(bytes1(uint8(MPC_TYPE.SUINT64_T)), numBits));\\n    }\\n\\n    function add(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function sub(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function mul(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function div(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function rem(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function and(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function or(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function xor(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n    function shl(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shr(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function eq(gtUint64 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ne(gtUint64 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ge(gtUint64 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function gt(gtUint64 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function le(gtUint64 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function lt(gtUint64 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function min(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function max(gtUint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function decrypt(gtUint64 ct) internal returns (uint64){\\n          return uint64(ExtendedOperations(MPC_PRECOMPILE).\\n            Decrypt(bytes1(uint8(MPC_TYPE.SUINT64_T)), gtUint64.unwrap(ct)));\\n    }\\n\\n    function mux(gtBool bit, gtUint64 a, gtUint64 b) internal returns (gtUint64){\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint64.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint64 b, gtUint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b), gtUint64.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transferWithAllowance(gtUint64 a, gtUint64 b, gtUint64 amount, gtUint64 allowance) internal returns (gtUint64, gtUint64, gtBool, gtUint64){\\n        (uint256 new_a, uint256 new_b, uint256 res, uint256 new_allowance) = ExtendedOperations(MPC_PRECOMPILE).\\n            TransferWithAllowance(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b), gtUint64.unwrap(amount), gtUint64.unwrap(allowance));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res), gtUint64.wrap(new_allowance));\\n    }\\n\\n    function transferWithAllowance(gtUint64 a, gtUint64 b, uint64 amount, gtUint64 allowance) internal returns (gtUint64, gtUint64, gtBool, gtUint64){\\n        (uint256 new_a, uint256 new_b, uint256 res, uint256 new_allowance) = ExtendedOperations(MPC_PRECOMPILE).\\n            TransferWithAllowance(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), gtUint64.unwrap(a), gtUint64.unwrap(b), uint256(amount), gtUint64.unwrap(allowance));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res), gtUint64.wrap(new_allowance));\\n    }\\n\\n\\n\\n\\n// =========== Operations with LHS_PUBLIC parameter ===========\\n // =========== 8 bit operations ==============\\n\\n    function add(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function sub(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function mul(uint8 a, gtUint8 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function div(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n    function rem(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function and(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function or(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function xor(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shl(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shr(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function eq(uint8 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ne(uint8 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ge(uint8 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function gt(uint8 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function le(uint8 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function lt(uint8 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function min(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function max(uint8 a, gtUint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), uint256(a), gtUint8.unwrap(b)));\\n    }\\n\\n\\n // =========== 16 bit operations ==============\\n\\n    function add(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function sub(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function mul(uint16 a, gtUint16 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function div(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function rem(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function and(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function or(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function xor(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shl(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shr(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function eq(uint16 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ne(uint16 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ge(uint16 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function gt(uint16 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function le(uint16 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function lt(uint16 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function min(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function max(uint16 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), uint256(a), gtUint16.unwrap(b)));\\n    }\\n\\n\\n    // =========== 32 bit operations ==============\\n\\n    function add(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function sub(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function mul(uint32 a, gtUint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function div(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function rem(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function and(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function or(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function xor(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shl(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shr(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function eq(uint32 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ne(uint32 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ge(uint32 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function gt(uint32 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function le(uint32 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function lt(uint32 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function min(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function max(uint32 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), uint256(a), gtUint32.unwrap(b)));\\n    }\\n\\n\\n// =========== 64 bit operations ==============\\n\\n    function add(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function sub(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function mul(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function div(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function rem(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function and(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function or(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function xor(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shl(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shr(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function eq(uint64 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ne(uint64 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ge(uint64 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function gt(uint64 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function le(uint64 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function lt(uint64 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function min(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function max(uint64 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), uint256(a), gtUint64.unwrap(b)));\\n    }\\n\\n    \\n // =========== Operations with RHS_PUBLIC parameter ===========\\n // =========== 8 bit operations ==============\\n\\n    function add(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function sub(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function mul(gtUint8 a, uint8 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function div(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function rem(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function and(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n         return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function or(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function xor(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function shl(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n          return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function shr(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function eq(gtUint8 a, uint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function ne(gtUint8 a, uint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n    \\n    function ge(gtUint8 a, uint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function gt(gtUint8 a, uint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function le(gtUint8 a, uint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function lt(gtUint8 a, uint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function min(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n    function max(gtUint8 a, uint8 b) internal returns (gtUint8) {\\n        return gtUint8.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint8.unwrap(a), uint256(b)));\\n    }\\n\\n // =========== 16 bit operations ==============\\n\\n    function add(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function sub(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function mul(gtUint16 a, uint16 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function div(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function rem(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function and(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function or(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function xor(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function shl(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function shr(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function eq(gtUint16 a, uint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function ne(gtUint16 a, uint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function ge(gtUint16 a, uint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function gt(gtUint16 a, uint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function le(gtUint16 a, uint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function lt(gtUint16 a, uint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function min(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n    function max(gtUint16 a, uint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.RHS_PUBLIC), gtUint16.unwrap(a), uint256(b)));\\n    }\\n\\n\\n    // =========== 32 bit operations ==============\\n\\n    function add(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function sub(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function mul(gtUint32 a, uint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function div(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function rem(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function and(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n    function or(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function xor(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function shl(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function shr(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function eq(gtUint32 a, uint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function ne(gtUint32 a, uint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function ge(gtUint32 a, uint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function gt(gtUint32 a, uint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function le(gtUint32 a, uint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function lt(gtUint32 a, uint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function min(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n    function max(gtUint32 a, uint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.RHS_PUBLIC), gtUint32.unwrap(a), uint256(b)));\\n    }\\n\\n\\n\\n// =========== 64 bit operations ==============\\n\\n    function add(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function sub(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function mul(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function div(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function rem(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function and(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function or(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function xor(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function shl(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function shr(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function eq(gtUint64 a, uint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function ne(gtUint64 a, uint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function ge(gtUint64 a, uint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function gt(gtUint64 a, uint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function le(gtUint64 a, uint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function lt(gtUint64 a, uint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function min(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    function max(gtUint64 a, uint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.RHS_PUBLIC), gtUint64.unwrap(a), uint256(b)));\\n    }\\n\\n    // In the context of a transfer, scalar balances are irrelevant;\\n\\t// The only possibility for a scalar value is within the \\\"amount\\\" parameter.\\n\\t// Therefore, in this scenario, LHS_PUBLIC signifies a scalar amount, not balance1.\\n\\n    function transfer(gtUint8 a, gtUint8 b, uint8 amount) internal returns (gtUint8, gtUint8, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.LHS_PUBLIC), gtUint8.unwrap(a), gtUint8.unwrap(b), uint256(amount));\\n        return (gtUint8.wrap(new_a), gtUint8.wrap(new_b), gtBool.wrap(res));\\n    }\\n    \\n    function transfer(gtUint16 a, gtUint16 b, uint16 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), gtUint16.unwrap(a), gtUint16.unwrap(b), uint256(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint16 b, uint16 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), gtUint8.unwrap(a), gtUint16.unwrap(b), uint256(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint8 b, uint16 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.LHS_PUBLIC), gtUint16.unwrap(a), gtUint8.unwrap(b), uint256(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint32 b, uint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), gtUint32.unwrap(a), gtUint32.unwrap(b), uint256(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint32 b, uint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), gtUint8.unwrap(a), gtUint32.unwrap(b), uint256(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint8 b, uint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), gtUint32.unwrap(a), gtUint8.unwrap(b), uint256(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint32 b, uint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), gtUint16.unwrap(a), gtUint32.unwrap(b), uint256(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint16 b, uint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.LHS_PUBLIC), gtUint32.unwrap(a), gtUint16.unwrap(b), uint256(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint64 b, uint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), gtUint64.unwrap(a), gtUint64.unwrap(b), uint256(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint64 b, uint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), gtUint8.unwrap(a), gtUint64.unwrap(b), uint256(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint8 b, uint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), gtUint64.unwrap(a), gtUint8.unwrap(b), uint256(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint64 b, uint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), gtUint16.unwrap(a), gtUint64.unwrap(b), uint256(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint16 b, uint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), gtUint64.unwrap(a), gtUint16.unwrap(b), uint256(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint64 b, uint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), gtUint32.unwrap(a), gtUint64.unwrap(b), uint256(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint32 b, uint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.LHS_PUBLIC), gtUint64.unwrap(a), gtUint32.unwrap(b), uint256(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    \\n    \\n\\n // ================= Cast operation =================\\n // =========== 8 - 16 bit operations ==============\\n\\n    function add(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function add(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function sub(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function sub(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function mul(gtUint8 a, gtUint16 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function mul(gtUint16 a, gtUint8 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function div(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function div(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function rem(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function rem(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function and(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function and(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function or(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function or(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function xor(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function xor(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shl(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shl(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n          return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shr(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shr(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function eq(gtUint8 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function eq(gtUint16 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ne(gtUint8 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ne(gtUint16 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ge(gtUint8 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ge(gtUint16 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function gt(gtUint8 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function gt(gtUint16 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function le(gtUint8 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n     function le(gtUint16 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function lt(gtUint8 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function lt(gtUint16 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function min(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function min(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function max(gtUint8 a, gtUint16 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function max(gtUint16 a, gtUint8 b) internal returns (gtUint16) {\\n        return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint8 a, gtUint16 b) internal returns (gtUint16){\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint8.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint16 a, gtUint8 b) internal returns (gtUint16){\\n         return gtUint16.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint16.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint16 b, gtUint16 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint8 b, gtUint16 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint16 b, gtUint8 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint16.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint8 b, gtUint8 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint8.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint16 b, gtUint8 amount) internal returns (gtUint16, gtUint16, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint16.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint16.wrap(new_a), gtUint16.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n\\n\\n    // =========== 8- 32 bit operations ==============\\n\\n    function add(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function add(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function sub(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function sub(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function mul(gtUint8 a, gtUint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function mul(gtUint32 a, gtUint8 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function div(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function div(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function rem(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function rem(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function and(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function and(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function or(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function or(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function xor(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function xor(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shl(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shl(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shr(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shr(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function eq(gtUint8 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function eq(gtUint32 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ne(gtUint8 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ne(gtUint32 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ge(gtUint8 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ge(gtUint32 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function gt(gtUint8 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function gt(gtUint32 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function le(gtUint8 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function le(gtUint32 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function lt(gtUint8 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function lt(gtUint32 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function min(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function min(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function max(gtUint8 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n     function max(gtUint32 a, gtUint8 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint8 a, gtUint32 b) internal returns (gtUint32){\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint8.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint32 a, gtUint8 b) internal returns (gtUint32){\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint32.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint32 b, gtUint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T,  MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint8 b, gtUint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T,  MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint32 b, gtUint8 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T,  MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint8 b, gtUint8 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T,  MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint32 b, gtUint16 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T,  MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint32.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint8 b, gtUint16 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T,  MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint8.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint32 b, gtUint8 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T,  MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n\\n    // =========== 16 - 32 bit operations ==============\\n\\n    function add(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function add(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function sub(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function sub(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function mul(gtUint16 a, gtUint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function mul(gtUint32 a, gtUint16 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function div(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function div(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function rem(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function rem(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function and(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function and(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function or(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function or(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function xor(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function xor(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shl(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shl(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n          return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shr(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shr(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function eq(gtUint16 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function eq(gtUint32 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ne(gtUint16 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ne(gtUint32 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ge(gtUint16 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ge(gtUint32 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function gt(gtUint16 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function gt(gtUint32 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function le(gtUint16 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function le(gtUint32 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function lt(gtUint16 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function lt(gtUint32 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function min(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function min(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function max(gtUint16 a, gtUint32 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n     function max(gtUint32 a, gtUint16 b) internal returns (gtUint32) {\\n        return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint16 a, gtUint32 b) internal returns (gtUint32){\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint16.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint32 a, gtUint16 b) internal returns (gtUint32){\\n         return gtUint32.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint32.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint32 b, gtUint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint16 b, gtUint32 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint32 b, gtUint8 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint16 b, gtUint8 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint32 b, gtUint16 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint32.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint16 b, gtUint16 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint16.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint32 b, gtUint16 amount) internal returns (gtUint32, gtUint32, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T,  MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint32.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint32.wrap(new_a), gtUint32.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n\\n\\n// =========== 8 - 64 bit operations ==============\\n    \\n    function add(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function add(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function sub(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function sub(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function mul(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function mul(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function div(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function div(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function rem(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function rem(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function and(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function and(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function or(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function or(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function xor(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function xor(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shl(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shl(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function shr(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shr(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function eq(gtUint8 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function eq(gtUint64 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ne(gtUint8 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ne(gtUint64 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function ge(gtUint8 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ge(gtUint64 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function gt(gtUint8 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n    \\n    function gt(gtUint64 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function le(gtUint8 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n    \\n    function le(gtUint64 a, gtUint8 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function lt(gtUint8 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function lt(gtUint64 a, gtUint8 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function min(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function min(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function max(gtUint8 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n     function max(gtUint64 a, gtUint8 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint8 a, gtUint64 b) internal returns (gtUint64){\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint8.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint64 a, gtUint8 b) internal returns (gtUint64){\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint64.unwrap(a), gtUint8.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint64 b, gtUint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b), gtUint64.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint8 b, gtUint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b), gtUint64.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint64 b, gtUint8 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint8 b, gtUint8 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint8 a, gtUint64 b, gtUint16 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint8 b, gtUint16 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n     function transfer(gtUint8 a, gtUint64 b, gtUint32 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint8.unwrap(a), gtUint64.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint8 b, gtUint32 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint8.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint64 b, gtUint8 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    // =========== 16 - 64 bit operations ==============\\n    \\n    function add(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function add(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function sub(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function sub(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function mul(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function mul(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function div(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function div(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function rem(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function rem(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function and(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function and(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function or(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function or(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function xor(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function xor(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shl(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shl(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function shr(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shr(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function eq(gtUint16 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function eq(gtUint64 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ne(gtUint16 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ne(gtUint64 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function ge(gtUint16 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ge(gtUint64 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function gt(gtUint16 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n    \\n    function gt(gtUint64 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function le(gtUint16 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n    \\n    function le(gtUint64 a, gtUint16 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function lt(gtUint16 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function lt(gtUint64 a, gtUint16 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function min(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function min(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function max(gtUint16 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n     function max(gtUint64 a, gtUint16 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint16 a, gtUint64 b) internal returns (gtUint64){\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint16.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint64 a, gtUint16 b) internal returns (gtUint64){\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint64.unwrap(a), gtUint16.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint64 b, gtUint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b), gtUint64.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint16 b, gtUint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b), gtUint64.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint64 b, gtUint8 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint16 b, gtUint8 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint64 b, gtUint16 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint16 b, gtUint16 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint16 a, gtUint64 b, gtUint32 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint16.unwrap(a), gtUint64.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint16 b, gtUint32 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint16.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint64 b, gtUint16 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n     // =========== 32 - 64 bit operations ==============\\n    \\n    function add(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function add(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Add(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function sub(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function sub(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Sub(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function mul(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function mul(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mul(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function div(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function div(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Div(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function rem(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function rem(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Rem(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function and(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function and(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            And(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function or(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function or(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Or(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function xor(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function xor(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Xor(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shl(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shl(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n          return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shl(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function shr(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function shr(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Shr(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function eq(gtUint32 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function eq(gtUint64 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Eq(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ne(gtUint32 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ne(gtUint64 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ne(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function ge(gtUint32 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function ge(gtUint64 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Ge(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function gt(gtUint32 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n    \\n    function gt(gtUint64 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Gt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function le(gtUint32 a, gtUint64 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n    \\n    function le(gtUint64 a, gtUint32 b) internal returns (gtBool) {\\n         return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Le(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function lt(gtUint32 a, gtUint64 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function lt(gtUint64 a, gtUint32 b) internal returns (gtBool) {\\n        return gtBool.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Lt(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function min(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function min(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Min(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function max(gtUint32 a, gtUint64 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n     function max(gtUint64 a, gtUint32 b) internal returns (gtUint64) {\\n        return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Max(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint32 a, gtUint64 b) internal returns (gtUint64){\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint32.unwrap(a), gtUint64.unwrap(b)));\\n    }\\n\\n    function mux(gtBool bit, gtUint64 a, gtUint32 b) internal returns (gtUint64){\\n         return gtUint64.wrap(ExtendedOperations(MPC_PRECOMPILE).\\n            Mux(combineEnumsToBytes3(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtBool.unwrap(bit), gtUint64.unwrap(a), gtUint32.unwrap(b)));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint64 b, gtUint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b), gtUint64.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint32 b, gtUint64 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b), gtUint64.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint64 b, gtUint8 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint32 b, gtUint8 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT8_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b), gtUint8.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint64 b, gtUint16 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint32 b, gtUint16 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT16_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b), gtUint16.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint32 a, gtUint64 b, gtUint32 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint32.unwrap(a), gtUint64.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint32 b, gtUint32 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint32.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n\\n    function transfer(gtUint64 a, gtUint64 b, gtUint32 amount) internal returns (gtUint64, gtUint64, gtBool){\\n        (uint256 new_a, uint256 new_b, uint256 res) = ExtendedOperations(MPC_PRECOMPILE).\\n            Transfer(combineEnumsToBytes4(MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT64_T, MPC_TYPE.SUINT32_T, ARGS.BOTH_SECRET), gtUint64.unwrap(a), gtUint64.unwrap(b), gtUint32.unwrap(amount));\\n        return (gtUint64.wrap(new_a), gtUint64.wrap(new_b), gtBool.wrap(res));\\n    }\\n}\",\"keccak256\":\"0xacfdd5ad73d0c3b4eb031e55354cc345cc1220fcb7d573018759699b7657d164\",\"license\":\"MIT\"},\"contracts/lib/MpcInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ExtendedOperations {\\n\\n    function OnBoard(bytes1 metaData, uint256 ct) external returns (uint256 result);\\n    function OffBoard(bytes1 metaData, uint256 ct) external returns (uint256 result);\\n    function OffBoardToUser(bytes1 metaData, uint256 ct, bytes calldata addr) external returns (uint256 result);\\n    function SetPublic(bytes1 metaData, uint256 ct) external returns (uint256 result);\\n    function Rand(bytes1 metaData) external returns (uint256 result);\\n    function RandBoundedBits(bytes1 metaData, uint8 numBits) external returns (uint256 result);\\n\\n    function Add(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Sub(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Mul(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Div(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Rem(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function And(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Or(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Xor(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Shl(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Shr(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Eq(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Ne(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Ge(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Gt(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Le(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Lt(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Min(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Max(bytes3 metaData, uint256 lhs, uint256 rhs) external returns (uint256 result);\\n    function Decrypt(bytes1 metaData, uint256 a) external returns (uint256 result);\\n    function Mux(bytes3 metaData, uint256 bit, uint256 a,uint256 b) external returns (uint256 result);\\n    function Not(bytes1 metaData, uint256 a) external returns (uint256 result);\\n    function Transfer(bytes4 metaData, uint256 a, uint256 b, uint256 amount) external returns (uint256 new_a, uint256 new_b, uint256 res);\\n    function TransferWithAllowance(bytes4 metaData, uint256 a, uint256 b, uint256 amount, uint256 allowance) external returns (uint256 new_a, uint256 new_b, uint256 res, uint256 new_allowance);\\n    function ValidateCiphertext(bytes1 metaData, uint256 ciphertext, bytes calldata signature) external returns (uint256 result);\\n    function GetUserKey(bytes calldata signedEK) external view returns (bytes memory encryptedKey);\\n}\\n\\naddress constant MPC_PRECOMPILE = address(0x0000000000000000000000000000000000000064);\\n\",\"keccak256\":\"0x04dcb0678ac0d8d809712f9e6f3b93dfefd6b2439235dd70b6cdba24bae8c4ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060056000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611657806100496000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638d7eadec11610097578063a40674b711610066578063a40674b714610202578063af384ac714610220578063d7c496011461023c578063fee511d61461025a576100f5565b80638d7eadec146101a05780639c82c7c7146101be5780639f3f69de146101da578063a2e12869146101e4576100f5565b80634f0bc491116100d35780634f0bc491146101525780634f2be91f1461016e57806361eeffcd1461017857806371091de314610182576100f5565b806305bdf1db146100fa57806318312545146101185780633b580f3c14610136575b600080fd5b610102610264565b60405161010f9190610da2565b60405180910390f35b61012061026e565b60405161012d9190610da2565b60405180910390f35b610150600480360381019061014b9190610e82565b610278565b005b61016c60048036038101906101679190610f85565b61046f565b005b6101766104f1565b005b610180610532565b005b61018a6105a4565b6040516101979190610da2565b60405180910390f35b6101a86105ae565b6040516101b59190610da2565b60405180910390f35b6101d860048036038101906101d39190610fe5565b6105b8565b005b6101e26105c2565b005b6101ec610789565b6040516101f99190610da2565b60405180910390f35b61020a610793565b6040516102179190611035565b60405180910390f35b61023a6004803603810190610235919061107c565b6107b0565b005b6102446107d0565b6040516102519190611167565b60405180910390f35b610262610828565b005b6000600354905090565b6000600154905090565b60008484905067ffffffffffffffff81111561029757610296611189565b5b6040519080825280602002602001820160405280156102c55781602001602082028036833780820191505090505b5090506102d0610cd9565b60005b868690508110156103a4578686828181106102f1576102f06111b8565b5b90506020020135826000018181525050848482818110610314576103136111b8565b5b905060200281019061032691906111f6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050826020018190525061037a8261089a565b83828151811061038d5761038c6111b8565b5b6020026020010181815250508060010190506102d3565b5060008686905067ffffffffffffffff8111156103c4576103c3611189565b5b6040519080825280602002602001820160405280156103f25781602001602082028036833780820191505090505b50905060005b835181101561044e57610424848281518110610417576104166111b8565b5b6020026020010151610941565b828281518110610437576104366111b8565b5b6020026020010181815250508060010190506103f8565b508060079080519060200190610465929190610cf3565b5050505050505050565b610477610cd9565b8381600001818152505082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525060006104d98261089a565b90506104e481610941565b6004819055505050505050565b60006104fe6003546109de565b9050600061050d6004546109de565b9050600061051b8383610a7b565b90506105278133610b12565b600581905550505050565b600061053f6004546109de565b905061054b8133610b12565b6002819055503373ffffffffffffffffffffffffffffffffffffffff167f958094500e56c659b01cdefb25c66c88f025c3c800f69b2a2141f8c73b30e0566002546040516105999190610da2565b60405180910390a250565b6000600454905090565b6000600554905090565b8060038190555050565b600060078054905067ffffffffffffffff8111156105e3576105e2611189565b5b6040519080825280602002602001820160405280156106115781602001602082028036833780820191505090505b50905060005b6007805490508110156106755761064b6007828154811061063b5761063a6111b8565b5b90600052602060002001546109de565b82828151811061065e5761065d6111b8565b5b602002602001018181525050806001019050610617565b506000815167ffffffffffffffff81111561069357610692611189565b5b6040519080825280602002602001820160405280156106c15781602001602082028036833780820191505090505b50905060005b825181101561071e576106f48382815181106106e6576106e56111b8565b5b602002602001015133610b12565b828281518110610707576107066111b8565b5b6020026020010181815250508060010190506106c7565b508060069080519060200190610735929190610cf3565b503373ffffffffffffffffffffffffffffffffffffffff167ff29eb7753999773f8931d432bd17dfc5473e8560c770476b559a2df112617d96600660405161077d919061132f565b60405180910390a25050565b6000600254905090565b60008060009054906101000a900467ffffffffffffffff16905090565b60006107bb82610bd1565b90506107c681610941565b6003819055505050565b6060600680548060200260200160405190810160405280929190818152602001828054801561081e57602002820191906000526020600020905b81548152602001906001019080831161080a575b5050505050905090565b60006108356003546109de565b90506108418133610b12565b6001819055503373ffffffffffffffffffffffffffffffffffffffff167f958094500e56c659b01cdefb25c66c88f025c3c800f69b2a2141f8c73b30e05660015460405161088f9190610da2565b60405180910390a250565b6000606473ffffffffffffffffffffffffffffffffffffffff1663e4f36e106004808111156108cc576108cb611351565b5b60f81b846000015185602001516040518463ffffffff1660e01b81526004016108f79392919061145a565b6020604051808303816000875af1158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a91906114c4565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663c50c9c0260048081111561097357610972611351565b5b60f81b846040518363ffffffff1660e01b81526004016109949291906114f1565b6020604051808303816000875af11580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d791906114c4565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663d2c135e5600480811115610a1057610a0f611351565b5b60f81b846040518363ffffffff1660e01b8152600401610a319291906114f1565b6020604051808303816000875af1158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7491906114c4565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff16638c5d0150610aa76004806000610c78565b85856040518463ffffffff1660e01b8152600401610ac793929190611555565b6020604051808303816000875af1158015610ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0a91906114c4565b905092915050565b6000606473ffffffffffffffffffffffffffffffffffffffff16633c6f0e68600480811115610b4457610b43611351565b5b60f81b8585604051602001610b599190611606565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610b869392919061145a565b6020604051808303816000875af1158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc991906114c4565b905092915050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663d9b60b60600480811115610c0357610c02611351565b5b60f81b8467ffffffffffffffff166040518363ffffffff1660e01b8152600401610c2e9291906114f1565b6020604051808303816000875af1158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7191906114c4565b9050919050565b6000816002811115610c8d57610c8c611351565b5b60ff166008846004811115610ca557610ca4611351565b5b61ffff16901b61ffff166010866004811115610cc457610cc3611351565b5b62ffffff16901b171760e81b90509392505050565b604051806040016040528060008152602001606081525090565b828054828255906000526020600020908101928215610d2f579160200282015b82811115610d2e578251825591602001919060010190610d13565b5b509050610d3c9190610d40565b5090565b5b80821115610d59576000816000905550600101610d41565b5090565b6000819050919050565b6000819050919050565b6000610d8c610d87610d8284610d5d565b610d67565b610d5d565b9050919050565b610d9c81610d71565b82525050565b6000602082019050610db76000830184610d93565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610dec57610deb610dc7565b5b8235905067ffffffffffffffff811115610e0957610e08610dcc565b5b602083019150836020820283011115610e2557610e24610dd1565b5b9250929050565b60008083601f840112610e4257610e41610dc7565b5b8235905067ffffffffffffffff811115610e5f57610e5e610dcc565b5b602083019150836020820283011115610e7b57610e7a610dd1565b5b9250929050565b60008060008060408587031215610e9c57610e9b610dbd565b5b600085013567ffffffffffffffff811115610eba57610eb9610dc2565b5b610ec687828801610dd6565b9450945050602085013567ffffffffffffffff811115610ee957610ee8610dc2565b5b610ef587828801610e2c565b925092505092959194509250565b610f0c81610d5d565b8114610f1757600080fd5b50565b600081359050610f2981610f03565b92915050565b60008083601f840112610f4557610f44610dc7565b5b8235905067ffffffffffffffff811115610f6257610f61610dcc565b5b602083019150836001820283011115610f7e57610f7d610dd1565b5b9250929050565b600080600060408486031215610f9e57610f9d610dbd565b5b6000610fac86828701610f1a565b935050602084013567ffffffffffffffff811115610fcd57610fcc610dc2565b5b610fd986828701610f2f565b92509250509250925092565b600060208284031215610ffb57610ffa610dbd565b5b600061100984828501610f1a565b91505092915050565b600067ffffffffffffffff82169050919050565b61102f81611012565b82525050565b600060208201905061104a6000830184611026565b92915050565b61105981611012565b811461106457600080fd5b50565b60008135905061107681611050565b92915050565b60006020828403121561109257611091610dbd565b5b60006110a084828501611067565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110de81610d71565b82525050565b60006110f083836110d5565b60208301905092915050565b6000602082019050919050565b6000611114826110a9565b61111e81856110b4565b9350611129836110c5565b8060005b8381101561115a57815161114188826110e4565b975061114c836110fc565b92505060018101905061112d565b5085935050505092915050565b600060208201905081810360008301526111818184611109565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611213576112126111e7565b5b80840192508235915067ffffffffffffffff821115611235576112346111ec565b5b602083019250600182023603831315611251576112506111f1565b5b509250929050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b60006112a361129e83611279565b611286565b9050919050565b60006112b68254611290565b9050919050565b6000600182019050919050565b60006112d582611259565b6112df81856110b4565b93506112ea83611264565b8060005b83811015611322576112ff826112aa565b61130988826110e4565b9750611314836112bd565b9250506001810190506112ee565b5085935050505092915050565b6000602082019050818103600083015261134981846112ca565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6113b581611380565b82525050565b6113c481610d5d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114045780820151818401526020810190506113e9565b60008484015250505050565b6000601f19601f8301169050919050565b600061142c826113ca565b61143681856113d5565b93506114468185602086016113e6565b61144f81611410565b840191505092915050565b600060608201905061146f60008301866113ac565b61147c60208301856113bb565b818103604083015261148e8184611421565b9050949350505050565b6114a181610d5d565b81146114ac57600080fd5b50565b6000815190506114be81611498565b92915050565b6000602082840312156114da576114d9610dbd565b5b60006114e8848285016114af565b91505092915050565b600060408201905061150660008301856113ac565b61151360208301846113bb565b9392505050565b60007fffffff000000000000000000000000000000000000000000000000000000000082169050919050565b61154f8161151a565b82525050565b600060608201905061156a6000830186611546565b61157760208301856113bb565b61158460408301846113bb565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115b78261158c565b9050919050565b60008160601b9050919050565b60006115d6826115be565b9050919050565b60006115e8826115cb565b9050919050565b6116006115fb826115ac565b6115dd565b82525050565b600061161282846115ef565b6014820191508190509291505056fea2646970667358221220d395261a7719e2e038106ff468b8032856d9c9cb6626c4088066e6df00910a1b64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638d7eadec11610097578063a40674b711610066578063a40674b714610202578063af384ac714610220578063d7c496011461023c578063fee511d61461025a576100f5565b80638d7eadec146101a05780639c82c7c7146101be5780639f3f69de146101da578063a2e12869146101e4576100f5565b80634f0bc491116100d35780634f0bc491146101525780634f2be91f1461016e57806361eeffcd1461017857806371091de314610182576100f5565b806305bdf1db146100fa57806318312545146101185780633b580f3c14610136575b600080fd5b610102610264565b60405161010f9190610da2565b60405180910390f35b61012061026e565b60405161012d9190610da2565b60405180910390f35b610150600480360381019061014b9190610e82565b610278565b005b61016c60048036038101906101679190610f85565b61046f565b005b6101766104f1565b005b610180610532565b005b61018a6105a4565b6040516101979190610da2565b60405180910390f35b6101a86105ae565b6040516101b59190610da2565b60405180910390f35b6101d860048036038101906101d39190610fe5565b6105b8565b005b6101e26105c2565b005b6101ec610789565b6040516101f99190610da2565b60405180910390f35b61020a610793565b6040516102179190611035565b60405180910390f35b61023a6004803603810190610235919061107c565b6107b0565b005b6102446107d0565b6040516102519190611167565b60405180910390f35b610262610828565b005b6000600354905090565b6000600154905090565b60008484905067ffffffffffffffff81111561029757610296611189565b5b6040519080825280602002602001820160405280156102c55781602001602082028036833780820191505090505b5090506102d0610cd9565b60005b868690508110156103a4578686828181106102f1576102f06111b8565b5b90506020020135826000018181525050848482818110610314576103136111b8565b5b905060200281019061032691906111f6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050826020018190525061037a8261089a565b83828151811061038d5761038c6111b8565b5b6020026020010181815250508060010190506102d3565b5060008686905067ffffffffffffffff8111156103c4576103c3611189565b5b6040519080825280602002602001820160405280156103f25781602001602082028036833780820191505090505b50905060005b835181101561044e57610424848281518110610417576104166111b8565b5b6020026020010151610941565b828281518110610437576104366111b8565b5b6020026020010181815250508060010190506103f8565b508060079080519060200190610465929190610cf3565b5050505050505050565b610477610cd9565b8381600001818152505082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525060006104d98261089a565b90506104e481610941565b6004819055505050505050565b60006104fe6003546109de565b9050600061050d6004546109de565b9050600061051b8383610a7b565b90506105278133610b12565b600581905550505050565b600061053f6004546109de565b905061054b8133610b12565b6002819055503373ffffffffffffffffffffffffffffffffffffffff167f958094500e56c659b01cdefb25c66c88f025c3c800f69b2a2141f8c73b30e0566002546040516105999190610da2565b60405180910390a250565b6000600454905090565b6000600554905090565b8060038190555050565b600060078054905067ffffffffffffffff8111156105e3576105e2611189565b5b6040519080825280602002602001820160405280156106115781602001602082028036833780820191505090505b50905060005b6007805490508110156106755761064b6007828154811061063b5761063a6111b8565b5b90600052602060002001546109de565b82828151811061065e5761065d6111b8565b5b602002602001018181525050806001019050610617565b506000815167ffffffffffffffff81111561069357610692611189565b5b6040519080825280602002602001820160405280156106c15781602001602082028036833780820191505090505b50905060005b825181101561071e576106f48382815181106106e6576106e56111b8565b5b602002602001015133610b12565b828281518110610707576107066111b8565b5b6020026020010181815250508060010190506106c7565b508060069080519060200190610735929190610cf3565b503373ffffffffffffffffffffffffffffffffffffffff167ff29eb7753999773f8931d432bd17dfc5473e8560c770476b559a2df112617d96600660405161077d919061132f565b60405180910390a25050565b6000600254905090565b60008060009054906101000a900467ffffffffffffffff16905090565b60006107bb82610bd1565b90506107c681610941565b6003819055505050565b6060600680548060200260200160405190810160405280929190818152602001828054801561081e57602002820191906000526020600020905b81548152602001906001019080831161080a575b5050505050905090565b60006108356003546109de565b90506108418133610b12565b6001819055503373ffffffffffffffffffffffffffffffffffffffff167f958094500e56c659b01cdefb25c66c88f025c3c800f69b2a2141f8c73b30e05660015460405161088f9190610da2565b60405180910390a250565b6000606473ffffffffffffffffffffffffffffffffffffffff1663e4f36e106004808111156108cc576108cb611351565b5b60f81b846000015185602001516040518463ffffffff1660e01b81526004016108f79392919061145a565b6020604051808303816000875af1158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a91906114c4565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663c50c9c0260048081111561097357610972611351565b5b60f81b846040518363ffffffff1660e01b81526004016109949291906114f1565b6020604051808303816000875af11580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d791906114c4565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663d2c135e5600480811115610a1057610a0f611351565b5b60f81b846040518363ffffffff1660e01b8152600401610a319291906114f1565b6020604051808303816000875af1158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7491906114c4565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff16638c5d0150610aa76004806000610c78565b85856040518463ffffffff1660e01b8152600401610ac793929190611555565b6020604051808303816000875af1158015610ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0a91906114c4565b905092915050565b6000606473ffffffffffffffffffffffffffffffffffffffff16633c6f0e68600480811115610b4457610b43611351565b5b60f81b8585604051602001610b599190611606565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610b869392919061145a565b6020604051808303816000875af1158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc991906114c4565b905092915050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663d9b60b60600480811115610c0357610c02611351565b5b60f81b8467ffffffffffffffff166040518363ffffffff1660e01b8152600401610c2e9291906114f1565b6020604051808303816000875af1158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7191906114c4565b9050919050565b6000816002811115610c8d57610c8c611351565b5b60ff166008846004811115610ca557610ca4611351565b5b61ffff16901b61ffff166010866004811115610cc457610cc3611351565b5b62ffffff16901b171760e81b90509392505050565b604051806040016040528060008152602001606081525090565b828054828255906000526020600020908101928215610d2f579160200282015b82811115610d2e578251825591602001919060010190610d13565b5b509050610d3c9190610d40565b5090565b5b80821115610d59576000816000905550600101610d41565b5090565b6000819050919050565b6000819050919050565b6000610d8c610d87610d8284610d5d565b610d67565b610d5d565b9050919050565b610d9c81610d71565b82525050565b6000602082019050610db76000830184610d93565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610dec57610deb610dc7565b5b8235905067ffffffffffffffff811115610e0957610e08610dcc565b5b602083019150836020820283011115610e2557610e24610dd1565b5b9250929050565b60008083601f840112610e4257610e41610dc7565b5b8235905067ffffffffffffffff811115610e5f57610e5e610dcc565b5b602083019150836020820283011115610e7b57610e7a610dd1565b5b9250929050565b60008060008060408587031215610e9c57610e9b610dbd565b5b600085013567ffffffffffffffff811115610eba57610eb9610dc2565b5b610ec687828801610dd6565b9450945050602085013567ffffffffffffffff811115610ee957610ee8610dc2565b5b610ef587828801610e2c565b925092505092959194509250565b610f0c81610d5d565b8114610f1757600080fd5b50565b600081359050610f2981610f03565b92915050565b60008083601f840112610f4557610f44610dc7565b5b8235905067ffffffffffffffff811115610f6257610f61610dcc565b5b602083019150836001820283011115610f7e57610f7d610dd1565b5b9250929050565b600080600060408486031215610f9e57610f9d610dbd565b5b6000610fac86828701610f1a565b935050602084013567ffffffffffffffff811115610fcd57610fcc610dc2565b5b610fd986828701610f2f565b92509250509250925092565b600060208284031215610ffb57610ffa610dbd565b5b600061100984828501610f1a565b91505092915050565b600067ffffffffffffffff82169050919050565b61102f81611012565b82525050565b600060208201905061104a6000830184611026565b92915050565b61105981611012565b811461106457600080fd5b50565b60008135905061107681611050565b92915050565b60006020828403121561109257611091610dbd565b5b60006110a084828501611067565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110de81610d71565b82525050565b60006110f083836110d5565b60208301905092915050565b6000602082019050919050565b6000611114826110a9565b61111e81856110b4565b9350611129836110c5565b8060005b8381101561115a57815161114188826110e4565b975061114c836110fc565b92505060018101905061112d565b5085935050505092915050565b600060208201905081810360008301526111818184611109565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611213576112126111e7565b5b80840192508235915067ffffffffffffffff821115611235576112346111ec565b5b602083019250600182023603831315611251576112506111f1565b5b509250929050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b60006112a361129e83611279565b611286565b9050919050565b60006112b68254611290565b9050919050565b6000600182019050919050565b60006112d582611259565b6112df81856110b4565b93506112ea83611264565b8060005b83811015611322576112ff826112aa565b61130988826110e4565b9750611314836112bd565b9250506001810190506112ee565b5085935050505092915050565b6000602082019050818103600083015261134981846112ca565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6113b581611380565b82525050565b6113c481610d5d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114045780820151818401526020810190506113e9565b60008484015250505050565b6000601f19601f8301169050919050565b600061142c826113ca565b61143681856113d5565b93506114468185602086016113e6565b61144f81611410565b840191505092915050565b600060608201905061146f60008301866113ac565b61147c60208301856113bb565b818103604083015261148e8184611421565b9050949350505050565b6114a181610d5d565b81146114ac57600080fd5b50565b6000815190506114be81611498565b92915050565b6000602082840312156114da576114d9610dbd565b5b60006114e8848285016114af565b91505092915050565b600060408201905061150660008301856113ac565b61151360208301846113bb565b9392505050565b60007fffffff000000000000000000000000000000000000000000000000000000000082169050919050565b61154f8161151a565b82525050565b600060608201905061156a6000830186611546565b61157760208301856113bb565b61158460408301846113bb565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115b78261158c565b9050919050565b60008160601b9050919050565b60006115d6826115be565b9050919050565b60006115e8826115cb565b9050919050565b6116006115fb826115ac565b6115dd565b82525050565b600061161282846115ef565b6014820191508190509291505056fea2646970667358221220d395261a7719e2e038106ff468b8032856d9c9cb6626c4088066e6df00910a1b64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "clearValue",
        "offset": 0,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 7,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "ctUserSomeEncryptedValue",
        "offset": 0,
        "slot": "1",
        "type": "t_userDefinedValueType(ctUint64)501"
      },
      {
        "astId": 10,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "ctUserSomeEncryptedValueEncryptedInput",
        "offset": 0,
        "slot": "2",
        "type": "t_userDefinedValueType(ctUint64)501"
      },
      {
        "astId": 13,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "ctNetworkSomeEncryptedValue",
        "offset": 0,
        "slot": "3",
        "type": "t_userDefinedValueType(ctUint64)501"
      },
      {
        "astId": 16,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "ctNetworkSomeEncryptedValueEncryptedInput",
        "offset": 0,
        "slot": "4",
        "type": "t_userDefinedValueType(ctUint64)501"
      },
      {
        "astId": 19,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "ctUserArithmeticResult",
        "offset": 0,
        "slot": "5",
        "type": "t_userDefinedValueType(ctUint64)501"
      },
      {
        "astId": 23,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "ctUserSomeEncryptedStringEncryptedInput",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_userDefinedValueType(ctUint64)501)dyn_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "ctNetworkSomeEncryptedStringEncryptedInput",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_userDefinedValueType(ctUint64)501)dyn_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/DataOnChain.sol:DataOnChain",
        "label": "ctUserSomeEncryptedStringValue",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_userDefinedValueType(ctUint64)501)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_userDefinedValueType(ctUint64)501)dyn_storage": {
        "base": "t_userDefinedValueType(ctUint64)501",
        "encoding": "dynamic_array",
        "label": "ctUint64[]",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_userDefinedValueType(ctUint64)501": {
        "encoding": "inplace",
        "label": "ctUint64",
        "numberOfBytes": "32"
      }
    }
  }
}